// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Utils$Converter from "./Utils.bs.js";
import * as Assemble$Converter from "./Assemble.bs.js";
import * as Constants$Converter from "./Constants.bs.js";
import * as AsciiDecompression$Converter from "./AsciiDecompression.bs.js";

var dict = {
  contents: {}
};

function loadDict(req) {
  try {
    var parsed = JSON.parse(req.responseText);
    var value = Utils$Converter.classifyJson(parsed);
    if (typeof value === "number" || value.TAG !== /* JSONObject */2) {
      return ;
    } else {
      dict.contents = value._0;
      return ;
    }
  }
  catch (exn){
    console.log("Parsing of dictionary failed.");
    return ;
  }
}

function convertToString(t) {
  var value = Utils$Converter.safeCastToString(t);
  if (value !== undefined) {
    return value;
  } else {
    return "";
  }
}

var convertToStringU = convertToString;

function lookup(s) {
  var result = Utils$Converter.safeGetD(dict.contents, s.toUpperCase());
  if (!result) {
    return ;
  }
  var value = Utils$Converter.classifyJson(result._0);
  if (typeof value === "number") {
    return ;
  }
  switch (value.TAG | 0) {
    case /* JSONString */0 :
        return {
                TAG: /* Single */0,
                _0: value._0
              };
    case /* JSONObject */2 :
        return {
                TAG: /* Variants */2,
                _0: Utils$Converter.mapD(value._0, convertToStringU)
              };
    case /* JSONArray */3 :
        return {
                TAG: /* Multiple */1,
                _0: value._0.map(convertToString)
              };
    default:
      return ;
  }
}

function decodePhonemes(letters) {
  return Array.from(letters, (function (x) {
                return AsciiDecompression$Converter.asciiDecompression[x];
              }));
}

function loadSpelling(param) {
  var vowels_kit = [
    "",
    document.getElementById("kit-vowel").value
  ];
  var vowels_dress = [
    "",
    document.getElementById("dress-vowel").value
  ];
  var vowels_trap = [
    "",
    document.getElementById("trap-vowel").value
  ];
  var vowels_lot = [
    "",
    document.getElementById("lot-vowel").value
  ];
  var vowels_strut = [
    "",
    document.getElementById("strut-vowel").value
  ];
  var vowels_foot = [
    "",
    document.getElementById("foot-vowel").value
  ];
  var vowels_cloth = [
    "",
    document.getElementById("cloth-vowel").value
  ];
  var vowels_nurse = [
    "",
    document.getElementById("nurse-vowel").value
  ];
  var vowels_fleece = [
    "",
    document.getElementById("fleece-vowel").value
  ];
  var vowels_face = [
    "",
    document.getElementById("face-vowel").value
  ];
  var vowels_palm = [
    "",
    document.getElementById("palm-vowel").value
  ];
  var vowels_thought = [
    "",
    document.getElementById("thought-vowel").value
  ];
  var vowels_goat = [
    "",
    document.getElementById("goat-vowel").value
  ];
  var vowels_goose = [
    "",
    document.getElementById("goose-vowel").value
  ];
  var vowels_price = [
    "",
    document.getElementById("price-vowel").value
  ];
  var vowels_choice = [
    "",
    document.getElementById("choice-vowel").value
  ];
  var vowels_mouth = [
    "",
    document.getElementById("mouth-vowel").value
  ];
  var vowels_cute = [
    "",
    document.getElementById("cute-vowel").value
  ];
  var vowels_near = [
    "",
    document.getElementById("near-vowel").value
  ];
  var vowels_square = [
    "",
    document.getElementById("square-vowel").value
  ];
  var vowels_start = [
    "",
    document.getElementById("start-vowel").value
  ];
  var vowels_north = [
    "",
    document.getElementById("north-vowel").value
  ];
  var vowels_poor = [
    "",
    document.getElementById("poor-vowel").value
  ];
  var vowels_cure = [
    "",
    document.getElementById("cure-vowel").value
  ];
  var vowels_fire = [
    "",
    document.getElementById("fire-vowel").value
  ];
  var vowels_flour = [
    "",
    document.getElementById("flour-vowel").value
  ];
  var vowels_coir = [
    "",
    document.getElementById("coir-vowel").value
  ];
  var vowels_ian = [
    "",
    document.getElementById("ian-vowel").value
  ];
  var vowels_happy = document.getElementById("happy-vowel").value;
  var vowels_letter = document.getElementById("letter-vowel").value;
  var vowels_comma = document.getElementById("comma-vowel").value;
  var vowels = {
    kit: vowels_kit,
    dress: vowels_dress,
    trap: vowels_trap,
    lot: vowels_lot,
    strut: vowels_strut,
    foot: vowels_foot,
    cloth: vowels_cloth,
    nurse: vowels_nurse,
    fleece: vowels_fleece,
    face: vowels_face,
    palm: vowels_palm,
    thought: vowels_thought,
    goat: vowels_goat,
    goose: vowels_goose,
    price: vowels_price,
    choice: vowels_choice,
    mouth: vowels_mouth,
    cute: vowels_cute,
    near: vowels_near,
    square: vowels_square,
    start: vowels_start,
    north: vowels_north,
    poor: vowels_poor,
    cure: vowels_cure,
    fire: vowels_fire,
    flour: vowels_flour,
    coir: vowels_coir,
    ian: vowels_ian,
    happy: vowels_happy,
    letter: vowels_letter,
    comma: vowels_comma
  };
  var consonants_b = document.getElementById("b-consonant").value;
  var consonants_ch = document.getElementById("ch-consonant").value;
  var consonants_d = document.getElementById("d-consonant").value;
  var consonants_dh = document.getElementById("dh-consonant").value;
  var consonants_el = document.getElementById("el-consonant").value;
  var consonants_em = document.getElementById("em-consonant").value;
  var consonants_en = document.getElementById("en-consonant").value;
  var consonants_er = document.getElementById("er-consonant").value;
  var consonants_f = document.getElementById("f-consonant").value;
  var consonants_g = document.getElementById("g-consonant").value;
  var consonants_hh = document.getElementById("h-consonant").value;
  var consonants_j = document.getElementById("j-consonant").value;
  var consonants_k = document.getElementById("k-consonant").value;
  var consonants_l = document.getElementById("l-consonant").value;
  var consonants_m = document.getElementById("m-consonant").value;
  var consonants_n = document.getElementById("n-consonant").value;
  var consonants_ng = document.getElementById("ng-consonant").value;
  var consonants_p = document.getElementById("p-consonant").value;
  var consonants_crv = document.getElementById("crv-consonant").value;
  var consonants_vrv = document.getElementById("vrv-consonant").value;
  var consonants_cs = document.getElementById("s-consonant-un").value;
  var consonants_vs = document.getElementById("s-consonant-am").value;
  var consonants_sh = document.getElementById("sh-consonant").value;
  var consonants_t = document.getElementById("t-consonant").value;
  var consonants_th = document.getElementById("th-consonant").value;
  var consonants_v = document.getElementById("v-consonant").value;
  var consonants_w = document.getElementById("w-consonant").value;
  var consonants_wh = document.getElementById("wh-consonant").value;
  var consonants_y = document.getElementById("y-consonant").value;
  var consonants_zc = document.getElementById("z-consonant-un").value;
  var consonants_zv = document.getElementById("z-consonant-am").value;
  var consonants_zh = document.getElementById("zh-consonant").value;
  var consonants = {
    b: consonants_b,
    ch: consonants_ch,
    d: consonants_d,
    dh: consonants_dh,
    el: consonants_el,
    em: consonants_em,
    en: consonants_en,
    er: consonants_er,
    f: consonants_f,
    g: consonants_g,
    hh: consonants_hh,
    j: consonants_j,
    k: consonants_k,
    l: consonants_l,
    m: consonants_m,
    n: consonants_n,
    ng: consonants_ng,
    p: consonants_p,
    crv: consonants_crv,
    vrv: consonants_vrv,
    cs: consonants_cs,
    vs: consonants_vs,
    sh: consonants_sh,
    t: consonants_t,
    th: consonants_th,
    v: consonants_v,
    w: consonants_w,
    wh: consonants_wh,
    y: consonants_y,
    zc: consonants_zc,
    zv: consonants_zv,
    zh: consonants_zh
  };
  return [
          vowels,
          consonants
        ];
}

function snd(tuple) {
  return tuple[1];
}

function setPreset(preset) {
  var match;
  switch (preset) {
    case "asian" :
        match = [
          Constants$Converter.lexicalsetsAsian,
          Constants$Converter.consonantsAsian
        ];
        break;
    case "european" :
        match = [
          Constants$Converter.lexicalSetsEuropean,
          Constants$Converter.consonantsEuropean
        ];
        break;
    default:
      match = [
        Constants$Converter.lexicalsetsEnglish,
        Constants$Converter.consonantsEnglish
      ];
  }
  var vowels = match[0];
  var consonants = match[1];
  var tmp = document.getElementById("kit-vowel");
  tmp.value = snd(vowels.kit);
  var tmp$1 = document.getElementById("dress-vowel");
  tmp$1.value = snd(vowels.dress);
  var tmp$2 = document.getElementById("trap-vowel");
  tmp$2.value = snd(vowels.trap);
  var tmp$3 = document.getElementById("lot-vowel");
  tmp$3.value = snd(vowels.lot);
  var tmp$4 = document.getElementById("strut-vowel");
  tmp$4.value = snd(vowels.strut);
  var tmp$5 = document.getElementById("foot-vowel");
  tmp$5.value = snd(vowels.foot);
  var tmp$6 = document.getElementById("cloth-vowel");
  tmp$6.value = snd(vowels.cloth);
  var tmp$7 = document.getElementById("nurse-vowel");
  tmp$7.value = snd(vowels.nurse);
  var tmp$8 = document.getElementById("fleece-vowel");
  tmp$8.value = snd(vowels.fleece);
  var tmp$9 = document.getElementById("face-vowel");
  tmp$9.value = snd(vowels.face);
  var tmp$10 = document.getElementById("palm-vowel");
  tmp$10.value = snd(vowels.palm);
  var tmp$11 = document.getElementById("thought-vowel");
  tmp$11.value = snd(vowels.thought);
  var tmp$12 = document.getElementById("goat-vowel");
  tmp$12.value = snd(vowels.goat);
  var tmp$13 = document.getElementById("goose-vowel");
  tmp$13.value = snd(vowels.goose);
  var tmp$14 = document.getElementById("price-vowel");
  tmp$14.value = snd(vowels.price);
  var tmp$15 = document.getElementById("choice-vowel");
  tmp$15.value = snd(vowels.choice);
  var tmp$16 = document.getElementById("mouth-vowel");
  tmp$16.value = snd(vowels.mouth);
  var tmp$17 = document.getElementById("cute-vowel");
  tmp$17.value = snd(vowels.cute);
  var tmp$18 = document.getElementById("near-vowel");
  tmp$18.value = snd(vowels.near);
  var tmp$19 = document.getElementById("square-vowel");
  tmp$19.value = snd(vowels.square);
  var tmp$20 = document.getElementById("start-vowel");
  tmp$20.value = snd(vowels.start);
  var tmp$21 = document.getElementById("north-vowel");
  tmp$21.value = snd(vowels.north);
  var tmp$22 = document.getElementById("poor-vowel");
  tmp$22.value = snd(vowels.poor);
  var tmp$23 = document.getElementById("cure-vowel");
  tmp$23.value = snd(vowels.cure);
  var tmp$24 = document.getElementById("fire-vowel");
  tmp$24.value = snd(vowels.fire);
  var tmp$25 = document.getElementById("flour-vowel");
  tmp$25.value = snd(vowels.flour);
  var tmp$26 = document.getElementById("coir-vowel");
  tmp$26.value = snd(vowels.coir);
  var tmp$27 = document.getElementById("ian-vowel");
  tmp$27.value = snd(vowels.ian);
  var tmp$28 = document.getElementById("happy-vowel");
  tmp$28.value = vowels.happy;
  var tmp$29 = document.getElementById("letter-vowel");
  tmp$29.value = vowels.letter;
  var tmp$30 = document.getElementById("comma-vowel");
  tmp$30.value = vowels.comma;
  var tmp$31 = document.getElementById("b-consonant");
  tmp$31.value = consonants.b;
  var tmp$32 = document.getElementById("ch-consonant");
  tmp$32.value = consonants.ch;
  var tmp$33 = document.getElementById("d-consonant");
  tmp$33.value = consonants.d;
  var tmp$34 = document.getElementById("dh-consonant");
  tmp$34.value = consonants.dh;
  var tmp$35 = document.getElementById("el-consonant");
  tmp$35.value = consonants.el;
  var tmp$36 = document.getElementById("em-consonant");
  tmp$36.value = consonants.em;
  var tmp$37 = document.getElementById("en-consonant");
  tmp$37.value = consonants.en;
  var tmp$38 = document.getElementById("er-consonant");
  tmp$38.value = consonants.er;
  var tmp$39 = document.getElementById("f-consonant");
  tmp$39.value = consonants.f;
  var tmp$40 = document.getElementById("g-consonant");
  tmp$40.value = consonants.g;
  var tmp$41 = document.getElementById("h-consonant");
  tmp$41.value = consonants.hh;
  var tmp$42 = document.getElementById("j-consonant");
  tmp$42.value = consonants.j;
  var tmp$43 = document.getElementById("k-consonant");
  tmp$43.value = consonants.k;
  var tmp$44 = document.getElementById("l-consonant");
  tmp$44.value = consonants.l;
  var tmp$45 = document.getElementById("m-consonant");
  tmp$45.value = consonants.m;
  var tmp$46 = document.getElementById("n-consonant");
  tmp$46.value = consonants.n;
  var tmp$47 = document.getElementById("ng-consonant");
  tmp$47.value = consonants.ng;
  var tmp$48 = document.getElementById("p-consonant");
  tmp$48.value = consonants.p;
  var tmp$49 = document.getElementById("crv-consonant");
  tmp$49.value = consonants.crv;
  var tmp$50 = document.getElementById("vrv-consonant");
  tmp$50.value = consonants.vrv;
  var tmp$51 = document.getElementById("s-consonant-un");
  tmp$51.value = consonants.cs;
  var tmp$52 = document.getElementById("s-consonant-am");
  tmp$52.value = consonants.vs;
  var tmp$53 = document.getElementById("sh-consonant");
  tmp$53.value = consonants.sh;
  var tmp$54 = document.getElementById("t-consonant");
  tmp$54.value = consonants.t;
  var tmp$55 = document.getElementById("th-consonant");
  tmp$55.value = consonants.th;
  var tmp$56 = document.getElementById("v-consonant");
  tmp$56.value = consonants.v;
  var tmp$57 = document.getElementById("w-consonant");
  tmp$57.value = consonants.w;
  var tmp$58 = document.getElementById("wh-consonant");
  tmp$58.value = consonants.wh;
  var tmp$59 = document.getElementById("y-consonant");
  tmp$59.value = consonants.y;
  var tmp$60 = document.getElementById("z-consonant-un");
  tmp$60.value = consonants.zc;
  var tmp$61 = document.getElementById("z-consonant-am");
  tmp$61.value = consonants.zv;
  var tmp$62 = document.getElementById("zh-consonant");
  tmp$62.value = consonants.zh;
  
}

function addSuffix(lookupResults, suffix, identifiers) {
  if (lookupResults === undefined) {
    return ;
  }
  switch (lookupResults.TAG | 0) {
    case /* Single */0 :
        return [lookupResults._0 + suffix];
    case /* Multiple */1 :
        return lookupResults._0.map(function (x) {
                    return x + suffix;
                  });
    case /* Variants */2 :
        return Object.entries(lookupResults._0).filter(function (param) {
                      return identifiers.includes(param[0]);
                    }).map(function (param) {
                    return param[1] + suffix;
                  });
    
  }
}

function findBaseForm(chunk) {
  var chunkUpper = chunk.toUpperCase();
  var chunkLast1 = chunkUpper.slice(-1);
  var chunkLast2 = chunkUpper.slice(-2);
  var chunkLast3 = chunkUpper.slice(-3);
  if (chunkLast3 === "ING") {
    var x = lookup(chunk.slice(0, -3));
    var result = x !== undefined ? x : lookup(chunk.slice(0, -3) + "E");
    return addSuffix(result, "=m", ["v"]);
  }
  if (chunkLast1 === "S") {
    var resultSS = chunkLast3 === "S'S" ? addSuffix(lookup(chunk.slice(0, -3)), "x'x", ["n"]) : undefined;
    if (resultSS !== undefined) {
      return resultSS;
    }
    var resultPosessive = chunkLast2 === "'S" ? addSuffix(lookup(chunk.slice(0, -2)), "'x", ["n"]) : undefined;
    if (resultPosessive !== undefined) {
      return resultPosessive;
    } else {
      return addSuffix(lookup(chunk.slice(0, -1)), "x", [
                  "n",
                  "v"
                ]);
    }
  }
  switch (chunkLast2) {
    case "ED" :
        var x$1 = lookup(chunk.slice(0, -2));
        var result$1 = x$1 !== undefined ? x$1 : lookup(chunk.slice(0, -1));
        return addSuffix(result$1, "c", ["v"]);
    case "LY" :
        var resultLLY = chunkLast3 === "LLY" ? addSuffix(lookup(chunk.slice(0, -3)), "}", ["j"]) : undefined;
        if (resultLLY !== undefined) {
          return resultLLY;
        } else {
          return addSuffix(lookup(chunk.slice(0, -2)), "j}", ["j"]);
        }
    default:
      return ;
  }
}

function convertToSpelling(chunk, lookupResults, settings) {
  var allConverted = lookupResults.map(function (variant) {
        var phons = decodePhonemes(variant);
        var converted = Assemble$Converter.assemble(phons, settings);
        if (chunk === "I") {
          return converted;
        } else if (chunk.toUpperCase() === chunk && chunk.toUpperCase() !== "A") {
          return converted.toUpperCase();
        } else if (chunk[0] === "'" || chunk[0].toUpperCase() !== chunk[0]) {
          return converted;
        } else {
          return converted[0].toUpperCase() + converted.slice(1);
        }
      });
  if (allConverted.length === 1) {
    return allConverted[0];
  } else {
    return "(" + allConverted.join("/") + ")";
  }
}

function convertText(text, settings) {
  var chunks = text.replace(/’/gi, "'").split(/([^a-zA-Z'])/);
  console.log(chunks);
  return chunks.reduce((function (result, maybeChunk) {
                if (maybeChunk === undefined) {
                  return result;
                }
                if (!/[a-zA-Z]/.test(maybeChunk)) {
                  return result + maybeChunk;
                }
                var lookupResults = lookup(maybeChunk);
                if (lookupResults !== undefined) {
                  var words;
                  switch (lookupResults.TAG | 0) {
                    case /* Single */0 :
                        words = [lookupResults._0];
                        break;
                    case /* Multiple */1 :
                        words = lookupResults._0;
                        break;
                    case /* Variants */2 :
                        words = Object.values(lookupResults._0);
                        break;
                    
                  }
                  return result + convertToSpelling(maybeChunk, words, settings);
                }
                var lookupResults$1 = findBaseForm(maybeChunk);
                if (lookupResults$1 !== undefined) {
                  return result + convertToSpelling(maybeChunk, lookupResults$1, settings);
                } else {
                  return result + "<" + maybeChunk + ">";
                }
              }), "");
}

function processText(param) {
  var text = document.getElementById("input").value;
  var withMerger = document.getElementById("withMerger").checked;
  var withStress = document.getElementById("withStress").checked;
  var withMacrons = document.getElementById("withMacrons").checked;
  var longToShort = document.getElementById("longToShort").checked;
  if (withMacrons) {
    Constants$Converter.setSpelling(Constants$Converter.lexicalsetsMacron, Constants$Converter.consonantsMacron);
  } else if (withStress) {
    Constants$Converter.setSpelling(Constants$Converter.lexicalSetsEuropean, Constants$Converter.consonantsEuropean);
  } else {
    var match = loadSpelling(undefined);
    Constants$Converter.setSpelling(match[0], match[1]);
  }
  var result = convertText(text, {
        withStress: withStress,
        withMerger: withMerger,
        longToShort: longToShort
      });
  var output = document.getElementById("output");
  output.value = result;
  
}

function tests(param) {
  var inputField = document.getElementById("input");
  inputField.value = "Foreskin SEEING dying saying behalf suing teriyaki\nevacuate boyhood adhere bloodshed midyear knowing away short awestruck withhold\nadulthood malevolent criminal fewer lure neurology careless what\'s think\nnighttime Mary merry marry mirror nearer hurry furry horror lore";
  
}

Constants$Converter.setSpelling(Constants$Converter.lexicalSetsEuropean, Constants$Converter.consonantsEuropean);

console.log(convertText("First second reading.", {
          withStress: false,
          withMerger: false,
          longToShort: true
        }));

export {
  loadDict ,
  processText ,
  setPreset ,
  tests ,
  
}
/*  Not a pure module */
